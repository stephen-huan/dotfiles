#!/usr/bin/env bash
# shellcheck disable=SC2034
AUDIO_FIELD="audio"
SCREENSHOT_FIELD="image"
SENTENCE_FIELD="sentence"
# leave OUTPUT_MONITOR blank to auto-select a monitor.
OUTPUT_MONITOR="WH-1000XM4"
AUDIO_BITRATE="64k"
AUDIO_FORMAT="opus"
AUDIO_VOLUME="1"
MINIMUM_DURATION="3000"
IMAGE_FORMAT="webp"
# -2 to calculate dimension while preserving aspect ratio.
IMAGE_WIDTH="-2"
IMAGE_HEIGHT="300"

check_response() {
    # check the JSON response of a request to Anki.
    # $1 is the response from ankiconnect_request().
    local -r error="$(echo "$1" | jq ".error")"
    if [[ "$error" != null ]]; then
        notify_message "${error:1:-1}"
        exit 1
    fi
}

get_selection() {
    # get a region of the screen for future screenshotting.
    slop --nodrag
}

record_function() {
    # function to record desktop audio.
    # $1 is the name of the output monitor.
    # $2 is the output file name.

    # the last function called here MUST be the call to
    # ffmpeg or some other program that does recording.
    # when -r is called again, the pid of the last function call is killed.
    local -r output="$1"
    local -r audio_file="$2"
    audio-record \
        --device "$output" \
        --channels 2 \
        --bitrate "$AUDIO_BITRATE" \
        "$audio_file" 1> /dev/null &
}

record_end() {
    # end recording.
    # the default implementation technically works but this is cleaner.
    # shellcheck disable=SC2154
    local -r audio_file="$(sed -n "1p" "$recording_toggle")"
    local -r pid="$(sed -n "2p" "$recording_toggle")"

    rm "$recording_toggle"
    kill -2 "$pid"

    while ( ps -p "$pid" &> /dev/null ); do
        true
    done

    store_file "${audio_file}"
    update_sound "$(basename -- "$audio_file")"

    notify_record_stop
}

